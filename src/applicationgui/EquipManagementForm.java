/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package applicationgui;


import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.Socket;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose
 */
public class EquipManagementForm extends javax.swing.JFrame {

    /**
     * Creates new form EquipManagementForm
     */
    
    AdminForm preForm;
    
    public EquipManagementForm() {
        initComponents();
    }
    
    public EquipManagementForm(AdminForm form) {
        initComponents();
        preForm = form;
        this.setLayout(null);
        computerPanel.setLayout(null);
        cameraPanel.setLayout(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        manageGroup = new javax.swing.ButtonGroup();
        deviceGroup = new javax.swing.ButtonGroup();
        messagePane = new javax.swing.JOptionPane();
        addERBtn = new javax.swing.JRadioButton();
        removeERBtn = new javax.swing.JRadioButton();
        updateERBtn = new javax.swing.JRadioButton();
        eBarcodeLabel = new javax.swing.JLabel();
        searchCode = new javax.swing.JTextField();
        retrieveBtn = new javax.swing.JButton();
        devicePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        bCodeBox = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        serialBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        deviceBox = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        condBox = new javax.swing.JTextField();
        computerBtn = new javax.swing.JRadioButton();
        cameraBtn = new javax.swing.JRadioButton();
        hpBtn = new javax.swing.JRadioButton();
        laptopCheck = new javax.swing.JCheckBox();
        computerPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cpuBox = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        ramBox = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        diskBox = new javax.swing.JTextField();
        addComputerBtn = new javax.swing.JButton();
        screenLabel = new javax.swing.JLabel();
        screenBox = new javax.swing.JTextField();
        touchCheck = new javax.swing.JCheckBox();
        cameraPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        cTypeBox = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        mpBox = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        scBox = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        stBox = new javax.swing.JTextField();
        CameraBtn = new javax.swing.JButton();
        hpPanel = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        hpTypeBox = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cordBox = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        plugBox = new javax.swing.JTextField();
        micCheck = new javax.swing.JCheckBox();
        volumeCheck = new javax.swing.JCheckBox();
        addHP = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Equipment Management");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        manageGroup.add(addERBtn);
        addERBtn.setText("Add Equipment");
        addERBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addERBtnActionPerformed(evt);
            }
        });

        manageGroup.add(removeERBtn);
        removeERBtn.setText("Remove Equipment");
        removeERBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeERBtnActionPerformed(evt);
            }
        });

        manageGroup.add(updateERBtn);
        updateERBtn.setText("Update Equipment");
        updateERBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateERBtnActionPerformed(evt);
            }
        });

        eBarcodeLabel.setText("Equipment Barcode:");

        retrieveBtn.setText("Retrieve Information");
        retrieveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveBtnActionPerformed(evt);
            }
        });

        jLabel2.setText("Device Barcode:");

        jLabel3.setText("Serial Number:");

        jLabel4.setText("Device Name:");

        jLabel5.setText("Condition:");

        deviceGroup.add(computerBtn);
        computerBtn.setSelected(true);
        computerBtn.setText("Computer");
        computerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computerBtnActionPerformed(evt);
            }
        });

        deviceGroup.add(cameraBtn);
        cameraBtn.setText("Camera");
        cameraBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cameraBtnActionPerformed(evt);
            }
        });

        deviceGroup.add(hpBtn);
        hpBtn.setText("Headphones");
        hpBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hpBtnActionPerformed(evt);
            }
        });

        laptopCheck.setText("Laptop");
        laptopCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                laptopCheckActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout devicePanelLayout = new javax.swing.GroupLayout(devicePanel);
        devicePanel.setLayout(devicePanelLayout);
        devicePanelLayout.setHorizontalGroup(
            devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicePanelLayout.createSequentialGroup()
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(devicePanelLayout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(devicePanelLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(bCodeBox))
                            .addGroup(devicePanelLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                                .addComponent(deviceBox, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(serialBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(condBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(devicePanelLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(laptopCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(computerBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cameraBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(hpBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        devicePanelLayout.setVerticalGroup(
            devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(devicePanelLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(bCodeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(serialBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(deviceBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(condBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(devicePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(computerBtn)
                    .addComponent(cameraBtn)
                    .addComponent(hpBtn)
                    .addComponent(laptopCheck)))
        );

        jLabel1.setText("CPU:");

        jLabel6.setText("Ram:");

        jLabel7.setText("Disk Size:");

        addComputerBtn.setText("Add");
        addComputerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addComputerBtnActionPerformed(evt);
            }
        });

        screenLabel.setText("Screen Size:");

        touchCheck.setText("Touch Screen");

        javax.swing.GroupLayout computerPanelLayout = new javax.swing.GroupLayout(computerPanel);
        computerPanel.setLayout(computerPanelLayout);
        computerPanelLayout.setHorizontalGroup(
            computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerPanelLayout.createSequentialGroup()
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cpuBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ramBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(diskBox, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(computerPanelLayout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(computerPanelLayout.createSequentialGroup()
                                .addComponent(screenLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(screenBox, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(34, 34, 34)
                                .addComponent(touchCheck))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, computerPanelLayout.createSequentialGroup()
                                .addGap(125, 125, 125)
                                .addComponent(addComputerBtn)
                                .addGap(91, 91, 91)))))
                .addContainerGap(40, Short.MAX_VALUE))
        );
        computerPanelLayout.setVerticalGroup(
            computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(computerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cpuBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(ramBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(diskBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(computerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(screenLabel)
                    .addComponent(screenBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(touchCheck))
                .addGap(18, 18, 18)
                .addComponent(addComputerBtn)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel8.setText("Camera Type:");

        jLabel9.setText("Megapixel:");

        jLabel10.setText("Storage Capacity:");

        jLabel11.setText("Storage Type:");

        CameraBtn.setText("Add");
        CameraBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CameraBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout cameraPanelLayout = new javax.swing.GroupLayout(cameraPanel);
        cameraPanel.setLayout(cameraPanelLayout);
        cameraPanelLayout.setHorizontalGroup(
            cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cameraPanelLayout.createSequentialGroup()
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(cameraPanelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cTypeBox, javax.swing.GroupLayout.DEFAULT_SIZE, 90, Short.MAX_VALUE)
                            .addComponent(scBox))
                        .addGap(18, 18, 18)
                        .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(cameraPanelLayout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(26, 26, 26)
                                .addComponent(mpBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(cameraPanelLayout.createSequentialGroup()
                                .addComponent(jLabel11)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(stBox))))
                    .addGroup(cameraPanelLayout.createSequentialGroup()
                        .addGap(195, 195, 195)
                        .addComponent(CameraBtn)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        cameraPanelLayout.setVerticalGroup(
            cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(cameraPanelLayout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(cTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9)
                    .addComponent(mpBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(cameraPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(scBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(stBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(CameraBtn)
                .addContainerGap(12, Short.MAX_VALUE))
        );

        jLabel12.setText("Headphone Type:");

        jLabel13.setText("Cord Length:");

        jLabel14.setText("Plug Diameter:");

        micCheck.setText("Microphone");

        volumeCheck.setText("Volume Control");

        addHP.setText("Add");
        addHP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addHPActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout hpPanelLayout = new javax.swing.GroupLayout(hpPanel);
        hpPanel.setLayout(hpPanelLayout);
        hpPanelLayout.setHorizontalGroup(
            hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, hpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(hpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addGap(26, 26, 26)))
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hpTypeBox, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                    .addComponent(plugBox))
                .addGap(18, 18, 18)
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(hpPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(10, 10, 10)
                        .addComponent(cordBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(hpPanelLayout.createSequentialGroup()
                        .addComponent(micCheck)
                        .addGap(18, 18, 18)
                        .addComponent(volumeCheck)))
                .addGap(36, 36, 36))
            .addGroup(hpPanelLayout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(addHP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        hpPanelLayout.setVerticalGroup(
            hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(hpPanelLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(hpTypeBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(cordBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(hpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(plugBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(micCheck)
                    .addComponent(volumeCheck))
                .addGap(18, 18, 18)
                .addComponent(addHP)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(devicePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(computerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cameraPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hpPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(eBarcodeLabel)
                        .addGap(18, 18, 18)
                        .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(retrieveBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(addERBtn)
                        .addGap(18, 18, 18)
                        .addComponent(removeERBtn)
                        .addGap(18, 18, 18)
                        .addComponent(updateERBtn)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addERBtn)
                    .addComponent(removeERBtn)
                    .addComponent(updateERBtn))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eBarcodeLabel)
                    .addComponent(searchCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(retrieveBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(devicePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(computerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(cameraPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(hpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        preForm.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void updateERBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateERBtnActionPerformed
        this.setSize(480, 130);
        retrieveBtn.setVisible(true);
        searchCode.setText("");
        searchCode.setVisible(true);
        eBarcodeLabel.setVisible(true);
        devicePanel.setVisible(false);
    }//GEN-LAST:event_updateERBtnActionPerformed

    private void removeERBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeERBtnActionPerformed
        this.setSize(480, 130);
        retrieveBtn.setVisible(true);
        searchCode.setText("");
        searchCode.setVisible(true);
        eBarcodeLabel.setVisible(true);
        devicePanel.setVisible(false);
    }//GEN-LAST:event_removeERBtnActionPerformed

    private void addERBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addERBtnActionPerformed
        this.setSize(480, 200);
        retrieveBtn.setVisible(false);
        searchCode.setVisible(false);
        eBarcodeLabel.setVisible(false);
        devicePanel.setLocation(0, 50);
        devicePanel.setVisible(true);
        deviceGroup.clearSelection();
        laptopCheck.setEnabled(false);
        laptopCheck.setSelected(false);
        computerPanel.setVisible(false);
    }//GEN-LAST:event_addERBtnActionPerformed

    private void computerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computerBtnActionPerformed
        laptopCheck.setEnabled(true);
        laptopCheck.setSelected(false);
        computerPanel.setVisible(true);
        this.setSize(480, 270);
        computerPanel.setLocation(0, 160);
        screenLabel.setVisible(false);
        screenBox.setVisible(false);
        touchCheck.setVisible(false);
        addComputerBtn.setLocation(200, 50);
        this.setLocationRelativeTo(null);
        cameraPanel.setVisible(false);
        hpPanel.setVisible(false);
    }//GEN-LAST:event_computerBtnActionPerformed

    private void cameraBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cameraBtnActionPerformed
        this.setSize(480, 320);
        this.setLocationRelativeTo(null);
        laptopCheck.setEnabled(false);
        laptopCheck.setSelected(false);
        computerPanel.setVisible(false);
        cameraPanel.setLocation(0,160);
        cameraPanel.setVisible(true);
        hpPanel.setVisible(false);
        
    }//GEN-LAST:event_cameraBtnActionPerformed

    private void hpBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hpBtnActionPerformed
        laptopCheck.setEnabled(false);
        laptopCheck.setSelected(false);
        cameraPanel.setVisible(false);
        computerPanel.setVisible(false);
        this.setSize(480, 320);
        this.setLocationRelativeTo(null);
        hpPanel.setVisible(true);
        hpPanel.setLocation(0,160);
    }//GEN-LAST:event_hpBtnActionPerformed

    private void laptopCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_laptopCheckActionPerformed
        if(laptopCheck.isSelected()){
            screenLabel.setVisible(true);
            screenBox.setVisible(true);
            touchCheck.setVisible(true);
            addComputerBtn.setLocation(200, 90);
            this.setSize(480, 310);
        }else{
            screenLabel.setVisible(false);
            screenBox.setVisible(false);
            touchCheck.setVisible(false);
            addComputerBtn.setLocation(200, 50);
            this.setSize(480, 270);
        }
    }//GEN-LAST:event_laptopCheckActionPerformed
    
    private void addComputerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addComputerBtnActionPerformed
         if(addERBtn.isSelected() == true){
            addDevice();
        }
    }//GEN-LAST:event_addComputerBtnActionPerformed

    private void CameraBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CameraBtnActionPerformed
        if(addERBtn.isSelected() == true){
            addDevice();
        }else if(removeERBtn.isSelected() == true){
            removeDevice();
        }
    }//GEN-LAST:event_CameraBtnActionPerformed

    private void addHPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addHPActionPerformed
        if(addERBtn.isSelected() == true){
            addDevice();
        }
    }//GEN-LAST:event_addHPActionPerformed

    private void retrieveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveBtnActionPerformed
        try{
            Socket s = new Socket("localHost", 8765);
            String message = "getDevice";
            OutputStream os = s.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
            
            InputStream is = s.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            message = (String)ois.readObject();
            System.out.println(message);
            if(message.equals("OK")){
                System.out.println(message);
                getDevice(s);
            }else{
                JOptionPane.showMessageDialog(messagePane, "Error");
            }
            ois.close();
            is.close();
            os.close();
            s.close();   
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }//GEN-LAST:event_retrieveBtnActionPerformed

    private void addDevice() { 
        try{
            Device d = null;
            if(cameraBtn.isSelected() == true){
                d = new Camera(bCodeBox.getText(), deviceBox.getText(), serialBox.getText(), condBox.getText(), Device.deviceType.camera, cTypeBox.getText(), mpBox.getText(), scBox.getText(), stBox.getText());
            }else if(hpBtn.isSelected() == true){
                try{
                    int cl = Integer.parseInt(cordBox.getText());
                    double cd = Double.parseDouble(plugBox.getText());
                    d = new Headphones(bCodeBox.getText(), deviceBox.getText(), serialBox.getText(), condBox.getText(), Device.deviceType.headphones, hpTypeBox.getText(), micCheck.isSelected(), volumeCheck.isSelected(), cl, cd);
                }catch (NumberFormatException e){
                    JOptionPane.showMessageDialog(messagePane, "Invalid Cord Length or Cord Diameter input");
                    System.out.println(e.toString());
                }
            }else if(computerBtn.isSelected() == true){
                if(laptopCheck.isSelected() == true){
                    
                }else{
                    
                }
            }
            
            Socket s = new Socket("localHost", 8765);
            String message = "addDevice";
            OutputStream os = s.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
            
            InputStream is = s.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            message = (String)ois.readObject();
            System.out.println(message);
            if(message.equals("OK")){
                System.out.println(message);
                addDevice(s,d);
            }else{
                JOptionPane.showMessageDialog(messagePane, "Error");
            }
            ois.close();
            is.close();
            os.close();
            s.close();            
            
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void addDevice(Socket s, Device d){
        try{
            OutputStream os = s.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(d);
            
            InputStream is = s.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            String message = (String)ois.readObject();
            System.out.println(message);
            if(message.equals("1")){
                JOptionPane.showMessageDialog(messagePane, "Device Added Succesfully");
            }else{
                JOptionPane.showMessageDialog(messagePane, "Device already Exists");
            }
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void removeDevice() { 
        try{            
            Socket s = new Socket("localHost", 8765);
            String message = "removeDevice";
            OutputStream os = s.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(message);
            
            InputStream is = s.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            message = (String)ois.readObject();
            System.out.println(message);
            if(message.equals("OK")){
                System.out.println(message);
                removeDevice(s,bCodeBox.getText());
            }else{
                JOptionPane.showMessageDialog(messagePane, "Error");
            }
            ois.close();
            is.close();
            os.close();
            s.close();            
            
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
            e.printStackTrace(System.err);
        }
    }
    
    private void removeDevice(Socket s, String id){
        try{
            OutputStream os = s.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(id);
            
            InputStream is = s.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            String message = (String)ois.readObject();
            System.out.println(message);
            if(message.equals("1")){
                JOptionPane.showMessageDialog(messagePane, "Device Removed Succesfully");
            }else{
                JOptionPane.showMessageDialog(messagePane, "Device does not Exists");
            }
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void getDevice(Socket s){
        try{
            OutputStream os = s.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(searchCode.getText());
            
            InputStream is = s.getInputStream();
            ObjectInputStream ois = new ObjectInputStream(is);
            String message = (String)ois.readObject();
            System.out.println(message);
            if(message.equals("1")){
                JOptionPane.showMessageDialog(messagePane, "Device retrieved Succesfully");
                is = s.getInputStream();
                ois = new ObjectInputStream(is);
                Device d = (Device)ois.readObject();
                updateLabels(d);
                System.out.println(d.toString());
                bCodeBox.setEnabled(false);
            }else{
                JOptionPane.showMessageDialog(messagePane, "Device does not Exists");
            }
        }catch(Exception e){
            System.err.println("Error: " + e.getMessage());
        }
    }
    
    private void updateLabels(Device d){
        retrieveBtn.setVisible(false);
        searchCode.setVisible(false);
        eBarcodeLabel.setVisible(false);
        devicePanel.setLocation(0, 50);
        devicePanel.setVisible(true);
        deviceGroup.clearSelection();
        laptopCheck.setEnabled(false);
        laptopCheck.setSelected(false);
        computerPanel.setVisible(false);
        
        bCodeBox.setText(d.getId());
        serialBox.setText(d.getSerialNumber());
        deviceBox.setText(d.getDeviceName());
        condBox.setText(d.getCondition());
        if(d instanceof Camera){
            Camera c = (Camera)d;
            this.setSize(480, 320);
            this.setLocationRelativeTo(null);
            laptopCheck.setEnabled(false);
            laptopCheck.setSelected(false);
            computerPanel.setVisible(false);
            cameraPanel.setLocation(0,160);
            cameraPanel.setVisible(true);
            hpPanel.setVisible(false);
            cameraBtn.setSelected(true);
            CameraBtn.setText("Remove User");
            CameraBtn.setSize(130, 23);
            
            cTypeBox.setText(c.getCameraType());
            mpBox.setText(c.getMegaPixel());
            scBox.setText(c.getStorageCapacity());
            stBox.setText(c.getStorageType());
        }else if(d instanceof Headphones){
            
        }else if(d instanceof Computer){
            
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EquipManagementForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EquipManagementForm().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CameraBtn;
    private javax.swing.JButton addComputerBtn;
    private javax.swing.JRadioButton addERBtn;
    private javax.swing.JButton addHP;
    private javax.swing.JTextField bCodeBox;
    private javax.swing.JTextField cTypeBox;
    private javax.swing.JRadioButton cameraBtn;
    private javax.swing.JPanel cameraPanel;
    private javax.swing.JRadioButton computerBtn;
    private javax.swing.JPanel computerPanel;
    private javax.swing.JTextField condBox;
    private javax.swing.JTextField cordBox;
    private javax.swing.JTextField cpuBox;
    private javax.swing.JTextField deviceBox;
    private javax.swing.ButtonGroup deviceGroup;
    private javax.swing.JPanel devicePanel;
    private javax.swing.JTextField diskBox;
    private javax.swing.JLabel eBarcodeLabel;
    private javax.swing.JRadioButton hpBtn;
    private javax.swing.JPanel hpPanel;
    private javax.swing.JTextField hpTypeBox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JCheckBox laptopCheck;
    private javax.swing.ButtonGroup manageGroup;
    private javax.swing.JOptionPane messagePane;
    private javax.swing.JCheckBox micCheck;
    private javax.swing.JTextField mpBox;
    private javax.swing.JTextField plugBox;
    private javax.swing.JTextField ramBox;
    private javax.swing.JRadioButton removeERBtn;
    private javax.swing.JButton retrieveBtn;
    private javax.swing.JTextField scBox;
    private javax.swing.JTextField screenBox;
    private javax.swing.JLabel screenLabel;
    private javax.swing.JTextField searchCode;
    private javax.swing.JTextField serialBox;
    private javax.swing.JTextField stBox;
    private javax.swing.JCheckBox touchCheck;
    private javax.swing.JRadioButton updateERBtn;
    private javax.swing.JCheckBox volumeCheck;
    // End of variables declaration//GEN-END:variables
}
